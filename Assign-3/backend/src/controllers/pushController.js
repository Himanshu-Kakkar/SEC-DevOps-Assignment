const simpleGit = require('simple-git');
const fs = require('fs');
const path = require('path');

const handlePushToRepo = async (req, res) => {
  let localPath = null;
  
  try {
    // Get request data
    const { repoUrl, pat, dockerfileContent } = req.body;
    
    if (!repoUrl || !pat || !dockerfileContent) {
      return res.status(400).json({ 
        status: 'error', 
        message: 'Repository URL, Personal Access Token, and Dockerfile content are required' 
      });
    }

    // Clone the repository
    localPath = path.join(__dirname, '..', '..', 'temp-clones', `push-${Date.now().toString()}`);
    const cloneUrl = repoUrl.replace('https://', `https://${pat}@`);
    
    console.log('Cloning repository for push...');
    await simpleGit().clone(cloneUrl, localPath);
    console.log('Repository cloned successfully');

    // Write the Dockerfile
    const dockerfilePath = path.join(localPath, 'Dockerfile');
    fs.writeFileSync(dockerfilePath, dockerfileContent);
    console.log('Dockerfile written');

    // Configure git user
    const git = simpleGit(localPath);
    await git.addConfig('user.name', 'DockGen AI');
    await git.addConfig('user.email', 'dockgen-ai@example.com');

    // Add, commit, and push
    await git.add('Dockerfile');
    await git.commit('Add Dockerfile generated by DockGen AI');
    await git.push('origin', 'main');

    console.log('Successfully pushed Dockerfile to repository');

    res.status(200).json({ 
      status: 'success', 
      message: 'Dockerfile successfully pushed to repository' 
    });

  } catch (error) {
    console.error('Error in handlePushToRepo:', error);
    
    res.status(500).json({ 
      status: 'error', 
      message: error.message 
    });
  } finally {
    // Cleanup: Remove temp folder
    if (localPath && fs.existsSync(localPath)) {
      try {
        fs.rmSync(localPath, { recursive: true, force: true });
        console.log('Cleaned up temp directory');
      } catch (cleanupError) {
        console.error('Failed to cleanup temp directory:', cleanupError);
      }
    }
  }
};

module.exports = {
  handlePushToRepo
};
