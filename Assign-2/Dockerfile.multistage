# Multi-Stage Dockerfile for Node.js App
# This Dockerfile demonstrates how to create minimal runtime images

# Stage 1: Build Stage
# This stage handles all the build dependencies and compilation
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files first (for better Docker layer caching)
COPY package*.json ./

# Install all dependencies (including dev dependencies for building)
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY . .

# Stage 2: Runtime Stage
# This stage contains only the runtime artifacts
FROM node:18-alpine AS runtime

# Create a non-root user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy only the production dependencies from builder stage
COPY --from=builder /app/node_modules ./node_modules

# Copy application files
COPY --from=builder /app/index.js ./
COPY --from=builder /app/public ./public

# Change ownership to nodejs user
RUN chown -R nodejs:nodejs /app
USER nodejs

# Expose the port the app runs on
EXPOSE 1234

# Health check to ensure the container is running properly
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:1234/', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the application
CMD ["node", "index.js"]
